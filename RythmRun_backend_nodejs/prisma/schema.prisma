generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int           @id @default(autoincrement())
  firstname          String?       @db.VarChar(255)
  lastname           String?       @db.VarChar(255)
  username           String        @unique @db.VarChar(255)
  password           String        @db.VarChar(255)
  profilePictureType String?       @db.VarChar(100)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @default(now()) @updatedAt
  profilePicturePath String?       @db.VarChar(255)
  activities         Activity[]
  comments           Comment[]
  friendsAsUser1     Friend[]      @relation("UserFriends")
  friendsAsUser2     Friend[]      @relation("UserFriends2")
  likes              Like[]
  refreshToken       RefreshToken?
}

model Activity {
  id          Int        @id @default(autoincrement())
  userId      Int
  type        String     @db.VarChar(50)
  startTime   DateTime
  endTime     DateTime
  distance    Float
  duration    Int
  avgSpeed    Float
  maxSpeed    Float
  calories    Int?
  description String?
  isPublic    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    Comment[]
  likes       Like[]
  locations   Location[]
}

model Location {
  id         Int      @id @default(autoincrement())
  activityId Int
  latitude   Float
  longitude  Float
  altitude   Float?
  timestamp  DateTime
  accuracy   Float?
  speed      Float?
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
}

model Comment {
  id         Int      @id @default(autoincrement())
  activityId Int
  userId     Int
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id         Int      @id @default(autoincrement())
  activityId Int
  userId     Int
  createdAt  DateTime @default(now())
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([activityId, userId])
}

model Friend {
  id        Int      @id @default(autoincrement())
  user1Id   Int
  user2Id   Int
  status    String   @db.VarChar(20)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user1     User     @relation("UserFriends", fields: [user1Id], references: [id], onDelete: Cascade)
  user2     User     @relation("UserFriends2", fields: [user2Id], references: [id], onDelete: Cascade)

  @@unique([user1Id, user2Id])
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  token      String   @unique @db.VarChar(512)
  expiryDate DateTime
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
